Given two strings s and t, return true if s is a subsequence of t, or false otherwise.
A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).
Example 1:
Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:
Input: s = "axc", t = "ahbgdc"
Output: false

To determine whether two strings are isomorphic or not, you can use a hash table to keep track of the mapping between characters in the two strings. Iterate over the characters of both strings simultaneously and compare their corresponding mappings in the hash table.
Algorithm:
Initialize an empty hash table.
Iterate over each character in s and t simultaneously.
If the current character in s is not already in the hash table, add it to the hash table with its corresponding character in t.
If the current character in s is already in the hash table, compare its corresponding character in t with the value stored in the hash table.
If they are not equal, return false.
If the loop completes without returning false, return true.

public boolean isIsomorphic(String s, String t) {
    if (s.length() != t.length()) {
        return false;
    }
    Map<Character, Character> map = new HashMap<>();
    Set<Character> used = new HashSet<>();
    for (int i = 0; i < s.length(); i++) {
        char cs = s.charAt(i);
        char ct = t.charAt(i);
        if (map.containsKey(cs)) {
            if (map.get(cs) != ct) {
                return false;
            }
        } else {
            if (used.contains(ct)) {
                return false;
            }
            map.put(cs, ct);
            used.add(ct);
        }
    }
    return true;
}
