Given the head of a singly linked list, reverse the list, and return the reversed list.
Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:
Input: head = [1,2]
Output: [2,1]
Example 3:
Input: head = []
Output: []
To reverse a linked list, we need to change the direction of pointers such that the next pointer of each node points to the previous node instead of the next node.
We can do this iteratively by keeping track of three pointers: previous, current, and next. We start with previous and current pointing to null and the head of the linked list, respectively. We traverse the linked list one node at a time, and at each node, we update the next pointer to point to the previous node, and then move the previous and current pointers one step forward.
When we reach the end of the linked list, we update the head pointer to point to the last node we visited, which is now the first node in the reversed list.
public ListNode reverseList(ListNode head) {
    ListNode prev = null;
    ListNode curr = head;
    while (curr != null) {
        ListNode nextTemp = curr.next;
        curr.next = prev;
        prev = curr;
        curr = nextTemp;
    }
Time Complexity: O(n) where n is the length of the linked list.
Space Complexity: O(1) as we only need constant extra space to keep track of three pointers.
